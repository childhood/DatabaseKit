//
//  DKTransaction.h
//  DatabaseKit
//
//  Created by Peter MacWhinnie on 9/3/09.
//  Copyright 2009 Roundabout Software. All rights reserved.
//

#import <Cocoa/Cocoa.h>
#import <sqlite3.h>

@class DKDatabase;

/*!
 @class
 @abstract		This class is responsible for processing transactions in DatabaseKit.
 @discussion	You do not create new instances of DKTransaction directly. You use the
				-[DKDatabase transaction:] method which will handle the creation and
				destruction of the transaction as well as thread and exception safety.
 */
@interface DKTransaction : NSObject
{
@package
	/* weak */	DKDatabase *mDatabase;
	/* weak */	sqlite3 *mSQLHandle;
	/* owner */	sqlite3_stmt *mCurrentStatement;
}
/*!
 @property
 @abstract	The database this transaction belongs to.
 */
@property (readonly) DKDatabase *database;

#pragma mark -
#pragma mark Running Statements

/*!
 @method
 @abstract	Compile an SQL statement for use in the transaction.
 @param		statement	A clean SQL statement to compile for use. May not be nil.
 @param		error		On return, will contain any error that occurred during compilation.
 @result	YES if the statement could be compiled; NO otherwise.
 */
- (BOOL)compileSQLStatement:(NSString *)statement error:(NSError **)error;

/*!
 @method
 @abstract		Evaluate the receiver's compiled SQL statement.
 @result		An SQLite status code (e.g. SQLITE_OK).
 @discussion	This method should be used to evaluate the compiled statement generated by `-[DKTransaction compileSQLStatement:error:]`.
 */
- (int)evaluateStatement;

/*!
 @method
 @abstract	The last error that occurred in the receiver.
 @result	A new autoreleased NSError if the transaction is in a state of error; nil otherwise.
 */
- (NSError *)lastError;

#pragma mark -

/*!
 @method
 @abstract	Execute an SQL statement in the context of the transaction.
 @param		statement	A clean SQL statement to execute. May not be nil.
 @param		error		On return, will contain any error that occurred during execution.
 @result	YES if the statement executed properly; NO otherwise.
 */
- (BOOL)executeSQLStatement:(NSString *)statement error:(NSError **)error;

#pragma mark -
#pragma mark Column Accessors

/*!
 @method
 @abstract		Assign null to a specified column in the receiver's compiled statement.
 @param			columnIndex	The index of the column to assign null to.
 @discussion	This method will raise if there is no statement compiled in the receiver, or if an error occurs while assigning to the column.
 */
- (void)setNullForColumnAtIndex:(int)columnIndex;

#pragma mark -

/*!
 @method
 @abstract		Assign a string to a specified column in the receiver's compiled statement.
 @param			string		The string to assign to the specified column. May not be nil.
 @param			columnIndex	The index of the column to assign null to.
 @discussion	This method will raise if there is no statement compiled in the receiver, or if an error occurs while assigning to the column.
 */
- (void)setString:(NSString *)string forColumnAtIndex:(int)columnIndex;

/*!
 @method
 @abstract	Get the string value for a specified column in the receiver's compiled statement.
 @result	A new autoreleased string object containing the column's value.
 */
- (NSString *)stringForColumnAtIndex:(int)columnIndex;

/*!
 @method
 @abstract		Assign a date to a specified column in the receiver's compiled statement.
 @param			date		The date to assign to the specified column. May not be nil.
 @param			columnIndex	The index of the column to assign null to.
 @discussion	This method will raise if there is no statement compiled in the receiver, or if an error occurs while assigning to the column.
 */
- (void)setDate:(NSDate *)date forColumnAtIndex:(int)columnIndex;

/*!
 @method
 @abstract	Get the date value for a specified column in the receiver's compiled statement.
 @result	A new autoreleased date object containing the column's value.
 */
- (NSDate *)dateForColumnAtIndex:(int)columnIndex;

#pragma mark -

/*!
 @method
 @abstract		Assign an int to a specified column in the receiver's compiled statement.
 @param			value		The int to assign to the specified column.
 @param			columnIndex	The index of the column to assign null to.
 @discussion	This method will raise if there is no statement compiled in the receiver, or if an error occurs while assigning to the column.
 */
- (void)setInt:(int)value forColumnAtIndex:(int)columnIndex;

/*!
 @method
 @abstract	Get the int value for a specified column in the receiver's compiled statement.
 @result	An int representing the column's value.
 */
- (int)intForColumnAtIndex:(int)columnIndex;

/*!
 @method
 @abstract		Assign a long long to a specified column in the receiver's compiled statement.
 @param			value		The long long to assign to the specified column.
 @param			columnIndex	The index of the column to assign null to.
 @discussion	This method will raise if there is no statement compiled in the receiver, or if an error occurs while assigning to the column.
 */
- (void)setLongLong:(long long)value forColumnAtIndex:(int)columnIndex;

/*!
 @method
 @abstract	Get the double value for a specified column in the receiver's compiled statement.
 @result	A long long representing the column's value.
 */
- (long long)longLongForColumnAtIndex:(int)columnIndex;

/*!
 @method
 @abstract		Assign a double to a specified column in the receiver's compiled statement.
 @param			value		The double to assign to the specified column.
 @param			columnIndex	The index of the column to assign null to.
 @discussion	This method will raise if there is no statement compiled in the receiver, or if an error occurs while assigning to the column.
 */
- (void)setDouble:(double)value forColumnAtIndex:(int)columnIndex;

/*!
 @method
 @abstract	Get the double value for a specified column in the receiver's compiled statement.
 @result	A double representing the column's value.
 */
- (double)doubleForColumnAtIndex:(int)columnIndex;

#pragma mark -

/*!
 @method
 @abstract		Assign a data object to a specified column in the receiver's compiled statement.
 @param			data		The data object to assign to the specified column. May not be nil.
 @param			columnIndex	The index of the column to assign null to.
 @discussion	This method will raise if there is no statement compiled in the receiver, or if an error occurs while assigning to the column.
 */
- (void)setData:(NSData *)data forColumnAtIndex:(int)columnIndex;

/*!
 @method
 @abstract	Get the data value for a specified column in the receiver's compiled statement.
 @result	A new autoreleased data object containing the column's value.
 */
- (NSData *)dataForColumnAtIndex:(int)columnIndex;

/*!
 @method
 @abstract		Assign an object conforming to NSCoding to a specified column in the receiver's compiled statement.
 @param			object		The object to assign to the specified column. May not be nil.
 @param			columnIndex	The index of the column to assign null to.
 @discussion	This method will raise if there is no statement compiled in the receiver, or if an error occurs while assigning to the column.
 */
- (void)setObject:(id < NSCoding >)object forColumnAtIndex:(int)columnIndex;

/*!
 @method
 @abstract	Get the object value for a specified column in the receiver's compiled statement.
 @result	A new autoreleased object containing the column's value.
 */
- (id < NSCoding >)objectForColumnAtIndex:(int)columnIndex;
@end
